// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String      @unique
  emailVerified   DateTime?
  image           String?
  password        String?     // For email/password authentication
  role            Role        @default(student)
  githubUsername  String?     @unique
  githubId        String?
  githubAdded     Boolean     @default(false)
  accounts        Account[]
  sessions        Session[]
  schedules       Schedule[]
  tasks           Task[]
  projects        Project[]
  studyGroups     StudyGroupMember[]
  messages        StudyGroupMessage[]
  createdStudyGroups StudyGroup[] @relation("CreatedStudyGroups")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum Role {
  admin
  student
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  githubUrl   String   @unique
  stars       Int      @default(0)
  forks       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudyGroup {
  id          String   @id @default(cuid())
  name        String
  createdBy   String
  creator     User     @relation("CreatedStudyGroups", fields: [createdBy], references: [id])
  members     StudyGroupMember[]
  messages    StudyGroupMessage[]
  createdAt   DateTime @default(now())
}

model StudyGroupMember {
  id          String   @id @default(cuid())
  groupId     String
  userId      String
  group       StudyGroup @relation(fields: [groupId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  joinedAt    DateTime   @default(now())

  @@unique([groupId, userId])
}

model StudyGroupMessage {
  id        String   @id @default(cuid())
  groupId   String
  senderId  String
  content   String
  group     StudyGroup @relation(fields: [groupId], references: [id])
  sender    User       @relation(fields: [senderId], references: [id])
  sentAt    DateTime   @default(now())
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Schedule {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  wakeTime    String
  sleepTime   String
  breakfast   String?
  lunch       String?
  dinner      String?
  activities  Activity[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  scheduleId  String
  schedule    Schedule @relation(fields: [scheduleId], references: [id])
  name        String
  startTime   String
  endTime     String
  day         Day
  isRecurring Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  dueDate     DateTime?
  priority    Int      @default(1)
  status      TaskStatus @default(pending)
  type        TaskType   @default(daily)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TaskStatus {
  pending
  in_progress
  completed
}

enum TaskType {
  daily
  weekly
  monthly
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}